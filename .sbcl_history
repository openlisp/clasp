8
7
9
7
6
7
6
9
8
6
7
hh
l
;
l
k
6
l
ll
l
;
l
7
6
8
7
6
7
(defun experimental-mesh (size)
(loop for x from 1 to (1- size)
      collect (list x  (1+ x))))
(experimental-mesh 10)
(defun experimental-mesh (size)
(list 
(loop for x from 1 to (1- size)
      collect (list x  (1+ x)))
(loop for x from 1 to (- size (sqrt size))
      collect (list x  (1+ (sqrt size))))))
(experimental-mesh 25)
(defun experimental-mesh (dim)
  
  (let ((size (* dim dim)))
    (list
      (loop for x from 1 to (1- size)
        collect (list x  (1+ x)))
      
      (loop for x from 1 to (- size dim)
        collect (list x  (1+ dim))))))
(experimental-mesh 25)
(experimental-mesh 5)
(defun experimental-mesh (dim)
  
  (let ((size (* dim dim)))
    (append
      (loop for x from 1 to (1- size)
        collect (list x  (1+ x)))
      
      (loop for x from 1 to (- size dim)
        collect (list x  (1+ dim))))))
(experimental-mesh 5)
(defun experimental-mesh (dim)
  
  (let ((size (* dim dim)))
    (append
      (loop for x from 1 to (1- size)
        collect (list x  (1+ x)))
      
      (loop for x from 1 to (- size dim)
        collect (list x  (1+ dim)))
      (loop for x from 1 to (- size dim -1)
        collect (list x  (+ 2 dim)))
      (loop for x from 2 to (- size dim)
        collect (list x  (+ 1 dim))))))
(defun experimental-mesh (dim)
1
(experimental-mesh 5)
(defun experimental-mesh (dim)
  
  (let ((size (* dim dim)))
    (append
      (loop for x from 1 to (1- size)
        collect (list x  (1+ x)))
      
      (loop for x from 1 to (- size dim)
        collect (list x  (+ x 1 dim )))
      (loop for x from 1 to (- size dim -1)
        collect (list x  (+ x 2 dim)))
      (loop for x from 2 to (- size dim)
        collect (list x  (+ x 1 dim))))))
(experimental-mesh 5)
(defun experimental-mesh (dim)
  
  (let ((size (* dim dim)))
    (append
      (loop for x from 1 to (1- size)
        collect (list x  (1+ x)))
      
      (loop for x from 1 to (- size dim)
        collect (list x  (+ x dim )))
      (loop for x from 1 to (- size dim -1)
        collect (list x  (+ x 2 dim)))
      (loop for x from 2 to (- size dim)
        collect (list x  (+ x 1 dim))))))
(experimental-mesh 5)
(defun experimental-mesh (dim)
  
  (let ((size (* dim dim)))
    (append
      (loop for x from 1 to (1- size)
        collect (list x  (1+ x)))
      
      (loop for x from 1 to (- size dim)
        collect (list x  (+ x dim )))
      (loop for x from 1 to (- size dim -1)
        collect (list x  (+ x 1 dim)))
      (loop for x from 2 to (- size dim)
        collect (list x  (+ x 1 dim))))))
(experimental-mesh 5)
(defun experimental-mesh (dim)
  
  (let ((size (* dim dim)))
    (append
      (loop for row from 1 to dim
        collect   (loop for x from (- (* row dim) dim) to (1- (* row dim)) collect (list x (1+ x))))
      (loop for x from 1 to (1- size)
        collect (list x  (1+ x)))
      
      (loop for x from 1 to (- size dim)
        collect (list x  (+ x dim )))
      (loop for x from 1 to (- size dim -1)
        collect (list x  (+ x 1 dim)))
      (loop for x from 2 to (- size dim)
        collect (list x  (+ x 1 dim))))))
(experimental-mesh 5)
(defun experimental-mesh (dim)
  
  (let ((size (* dim dim)))
    (append
      (loop for row from 1 to dim
        collect   (loop for x from (- (* row dim) dim) to (1- (* row dim)) (list x (1+ x))))
      (loop for x from 1 to (1- size)
        collect (list x  (1+ x)))
      
      (loop for x from 1 to (- size dim)
        collect (list x  (+ x dim )))
      (loop for x from 1 to (- size dim -1)
        collect (list x  (+ x 1 dim)))
      (loop for x from 2 to (- size dim)
        collect (list x  (+ x 1 dim))))))
(defun experimental-mesh (dim)
  
  (let ((size (* dim dim)))
    (append
      (loop for row from 1 to dim
        collect   (loop for x from (- (* row dim) dim) to (1- (* row dim)) do (list x (1+ x))))
      (loop for x from 1 to (1- size)
        collect (list x  (1+ x)))
      
      (loop for x from 1 to (- size dim)
        collect (list x  (+ x dim )))
      (loop for x from 1 to (- size dim -1)
        collect (list x  (+ x 1 dim)))
      (loop for x from 2 to (- size dim)
        collect (list x  (+ x 1 dim))))))
(experimental-mesh 5)
(defun experimental-mesh (dim)
  
  (let ((size (* dim dim)))
    (append
      (loop for row from 1 to dim
        collect   (loop for x from (- (* row dim) (1- dim)) to (1- (* row dim)) do (list x (1+ x))))
      (loop for x from 1 to (1- size)
        collect (list x  (1+ x)))
      
      (loop for x from 1 to (- size dim)
        collect (list x  (+ x dim )))
      (loop for x from 1 to (- size dim -1)
        collect (list x  (+ x 1 dim)))
      (loop for x from 2 to (- size dim)
        collect (list x  (+ x 1 dim))))))
(experimental-mesh 5)
(defun experimental-mesh (dim)
  
  (let ((size (* dim dim)))
    (append
      (loop for row from 1 to dim
        collect   (loop for x from (- (* row dim) (1- dim)) to (1- (* row dim)) do (list x (1+ x))))
      (loop for x from 1 to (1- size)
        collect (list x  (1+ x)))
      
      (loop for x from 1 to (- size dim)
        collect (list x  (+ x dim )))
      (loop for x from 1 to (- size dim -1)
        collect (list x  (+ x 1 dim)))
      (loop for x from 2 to (- size dim)
        collect (list x  (+ x 1 dim))))))
(experimental-mesh 5)
(experimental-mesh 2)
(defun experimental-mesh-simple (dim)
  
      (loop for row from 1 to dim
        collect   (loop for x from (- (* row dim) (1- dim)) to (1- (* row dim)) do (list x (1+ x)))))
(experimental-mesh-simple 5)
(experimental-mesh-simple 6)
(defun experimental-mesh-simple (dim)
  
      (loop for row from 1 to dim
        collect   (loop for x from (- (* row dim) (1- dim)) to (1- (* row dim)) collect (list x (1+ x)))))
(experimental-mesh-simple 6)
(experimental-mesh-simple 5)
      (loop for row from 1 to dim
        append   (loop for x from (- (* row dim) (1- dim)) to (1- (* row dim)) collect (list x (1+ x)))))
0
(defun experimental-mesh-simple (dim)
  
      (loop for row from 1 to dim
        collect  (loop for x from (- (* row dim) (1- dim)) to (1- (* row dim)) collect (list x (1+ x)))))
(experimental-mesh-simple 5)
(defun experimental-mesh-simple (dim)
  
      (loop for row from 1 to dim
        do (append  (loop for x from (- (* row dim) (1- dim)) to (1- (* row dim)) collect (list x (1+ x))))))
(experimental-mesh-simple 5)
(defun experimental-mesh-simple (dim)
  
      (loop for row from 1 to dim
        collect (append  (loop for x from (- (* row dim) (1- dim)) to (1- (* row dim)) collect (list x (1+ x))))))
(experimental-mesh-simple 5)
(defun experimental-mesh-simple (dim)
  
      (loop for row from 1 to dim
        do   (loop for x from (- (* row dim) (1- dim)) to (1- (* row dim)) collect (list x (1+ x)))))
(experimental-mesh-simple 5)
(defun experimental-mesh-simple (dim)
  (append 
      (loop for row from 1 to dim
        do   (loop for x from (- (* row dim) (1- dim)) to (1- (* row dim)) collect (list x (1+ x))))))
(experimental-mesh-simple 5)
(defun experimental-mesh-simple (dim)
  (append 
      (loop for row from 1 to dim
        do  (append (loop for x from (- (* row dim) (1- dim)) to (1- (* row dim)) collect (list x (1+ x)))))))
(experimental-mesh-simple 5)
(defun experimental-mesh-simple (dim)
 (let (( a '()))
      (loop for row from 1 to dim
        do (append a (loop for x from (- (* row dim) (1- dim)) to (1- (* row dim)) collect (list x (1+ x))))))
a)
(experimental-mesh-simple 5)
0
(defun experimental-mesh-simple (dim)
 (let (( a '()))
      (loop for row from 1 to dim
        do (append a (loop for x from (- (* row dim) (1- dim)) to (1- (* row dim)) collect (list x (1+ x)))))
a))
(experimental-mesh-simple 5)
(defun experimental-mesh-simple (dim)
 (let (( a '()))
      (loop for row from 1 to dim
        do (append a (loop for x from (- (* row dim) (1- dim)) to (1- (* row dim)) collect (list x (1+ x)))))
a))
(experimental-mesh-simple 5)
(defun experimental-mesh-simple (dim)
 (let (( a '(1 2 3)))
      (loop for row from 1 to dim
        do (append a (loop for x from (- (* row dim) (1- dim)) to (1- (* row dim)) collect (list x (1+ x)))))
a))
(experimental-mesh-simple 5)
(defun experimental-mesh-simple (dim)
 
      (loop for row from 1 to dim
            for x from (- (* row dim) (1- dim)) to (1- (* row dim)) collect (list x (1+ x))))
(experimental-mesh-simple 5)
(experimental-mesh-simple 6)
(defun experimental-mesh-simple (dim)
 
      (loop for row from 1 to dim collect row 
            for x from (- (* row dim) (1- dim)) to (1- (* row dim)) collect (list x (1+ x))))
(defun experimental-mesh-simple (dim)
      (loop for row from 1 to dim
        (append a (loop for x from (- (* row dim) (1- dim)) to (1- (* row dim)) collect x ))))
(defun experimental-mesh-simple (dim)(defun experimental-mesh-simple (dim)
      (loop for row from 1 to dim
        (collect (loop for x from (- (* row dim) (1- dim)) to (1- (* row dim)) collect x ))))
0
)
(defun experimental-mesh-simple (dim)
      (loop for row from 1 to dim
        (collect (loop for x from (- (* row dim) (1- dim)) to (1- (* row dim)) collect x ))))
(defun experimental-mesh-simple-a (dim)
      (loop for row from 1 to dim
        (collect (loop for x from (- (* row dim) (1- dim)) to (1- (* row dim)) collect x ))))
(defun experimental-mesh-simple-a (dim)
      (loop for r from 1 to dim
        (collect (loop for x from (- (* r dim) (1- dim)) to (1- (* r dim)) collect x ))))
(experimental-mesh-simple-a 6)
0
(defun experimental-mesh-simple (dim)
      (loop for r from 1 to dim
        collect (loop for x from (- (* r dim) (1- dim)) to (1- (* r dim)) collect x )))
(experimental-mesh-simple 6)
(defun experimental-mesh-simple (dim)
 (mapcar #'append
      (loop for r from 1 to dim
        collect (loop for x from (- (* r dim) (1- dim)) to (1- (* r dim)) collect x ))))
(experimental-mesh-simple 6)
(apply #'+ '(1 2 3))
(defun experimental-mesh-simple (dim)
 (apply #'append
      (loop for r from 1 to dim
        collect (loop for x from (- (* r dim) (1- dim)) to (1- (* r dim)) collect x ))))
(experimental-mesh-simple 6)
(experimental-mesh-simple 5)
(defun experimental-mesh-simple (dim &optional (skip 0) (leave 0))
 (apply #'append
      (loop for r from (+ 1 skip) to dim
        collect (loop for x from (- (* r dim) (1- dim)) to (- (* r dim) leave) collect x ))))
(experimental-mesh-simple 5)
(experimental-mesh-simple 5 0 1)
(experimental-mesh-simple 5 1)
(defun experimental-mesh-simple (dim &optional  (jump 0) (skip 0) (leave 0))
 (apply #'append
      (loop for r from (+ 1 jump) to dim
        collect (loop for x from (- (* r dim) (1- (+ skip dim)) ) to (- (* r dim) leave) collect x ))))
(experimental-mesh-simple 5)
(experimental-mesh-simple 5 1)
(experimental-mesh-simple 5 0 1)
(defun experimental-mesh-simple (dim &optional  (jump 0) (skip 0) (leave 0))
 (apply #'append
      (loop for r from (+ 1 jump) to dim
        collect (loop for x from (- (* r dim) (- dim 1 skip) ) to (- (* r dim) leave) collect x ))))
(experimental-mesh-simple 5 0 1)
(experimental-mesh-simple 5 0 0)
(experimental-mesh-simple 5 1)
(experimental-mesh-simple 5 0 1)
(experimental-mesh-simple 5 0 0)
(experimental-mesh-simple 5 0 1)
(experimental-mesh-simple 5 1 1)
(experimental-mesh-simple 5 0  1)
(experimental-mesh-simple 5 0 0  1)
(experimental-mesh-simple 5 0 0 1)
(experimental-mesh-simple 5 0 1 1)
(experimental-mesh-simple 5 0 1 0)
(experimental-mesh-simple 5 0 0 5)
(experimental-mesh-simple 5 0 0 4)
(experimental-mesh-simple 5 0 0 3)
(experimental-mesh-simple 5 0 0 4)
(experimental-mesh-simple 5 0 0 0)
(experimental-mesh-simple 5 1 0 0)
(experimental-mesh-simple 5 0 0 0)
(defun experimental-mesh-simple (dim &optional  (jump 0) (drop 0) (skip 0) (leave 0))
 (apply #'append
      (loop for r from (+ 1 jump) to (+ dim drop)
        collect (loop for x from (- (* r dim) (- dim 1 skip) ) to (- (* r dim) leave) collect x ))))
(experimental-mesh-simple 5 0 0 0 0)
(experimental-mesh-simple 5 0 1 0 0)
(defun experimental-mesh-simple (dim &optional  (jump 0) (drop 0) (skip 0) (leave 0))
 (apply #'append
      (loop for r from (+ 1 jump) to (- dim drop)
        collect (loop for x from (- (* r dim) (- dim 1 skip) ) to (- (* r dim) leave) collect x ))))
(experimental-mesh-simple 5 0 1 0 0)
(experimental-mesh-simple 5 1 0  0 0)
(experimental-mesh-simple 5 0 1 0 1)
1(experimental-mesh-simple 5 0 1 0 1)
1
(loop for x in (experimental-mesh-simple 5 0 0 0 1)
      for y in (experimental-mesh-simple 5 0 0 1 0)
      collect (list x y) )
(loop for x in (experimental-mesh-simple 5 0 1 0 0)
      for y in (experimental-mesh-simple 5 1 0 0 0)
      collect (list x y) )
(loop for x in (experimental-mesh-simple 5 0 0 1 1)
      for y in (experimental-mesh-simple 5 1 1 0 0)
      collect (list x y) )
(loop for x in (experimental-mesh-simple 5 0 0 1 0)
      for y in (experimental-mesh-simple 5 1 0 0 1)
      collect (list x y) )
(loop for x in (experimental-mesh-simple 5 0 0 1 0)
      for y in (experimental-mesh-simple 5 1 0 1 1)
      collect (list x y) )
(loop for x in (experimental-mesh-simple 5 0 0 1 0)
      for y in (experimental-mesh-simple 5 1 0 0 0)
      collect (list x y) )
(loop for x in (experimental-mesh-simple 5 0 0 0 0)
      for y in (experimental-mesh-simple 5 1 0 0 0)
      collect (list x y) )
(loop for x in (experimental-mesh-simple 5 0 1 1 0)
      for y in (experimental-mesh-simple 5 1 0 0 0)
      collect (list x y) )
(loop for x in (experimental-mesh-simple 5 0 0 1 0)
      for y in (experimental-mesh-simple 5 1 0 0 0)
      collect (list x y) )
(loop for x in (experimental-mesh-simple 5 0 1 1 0)
      for y in (experimental-mesh-simple 5 1 0 0 0)
      collect (list x y) )
(loop for x in (experimental-mesh-simple 5 0 1 1 0)
      for y in (experimental-mesh-simple 5 1 0 0 1)
      collect (list x y) )
(loop for x in (experimental-mesh-simple 5 0 0 1 1)
      for y in (experimental-mesh-simple 5 1 0 0 1)
      collect (list x y) )
(loop for x in (experimental-mesh-simple 5 0 0 0 0)
      for y in (experimental-mesh-simple 5 1 0 0 1)
      collect (list x y) )
(loop for x in (experimental-mesh-simple 5 0 0 0 1)
      for y in (experimental-mesh-simple 5 1 0 0 1)
      collect (list x y) )
(loop for x in (experimental-mesh-simple 5 0 1 0 1)
      for y in (experimental-mesh-simple 5 1 0 0 1)
      collect (list x y) )
(loop for x in (experimental-mesh-simple 5 0 1 0 1)
      for y in (experimental-mesh-simple 5 1 0 1 0)
      collect (list x y) )
(append 
(loop for x in (experimental-mesh-simple 5 0 1 1 0)
      for y in (experimental-mesh-simple 5 1 0 0 1)
      collect (list x y) )
(loop for x in (experimental-mesh-simple 5 0 1 0 1)
      for y in (experimental-mesh-simple 5 1 0 1 0)
      collect (list x y) ))
(defun experimental-mesh-simple (dim &optional  (jump 0) (drop 0) (skip 0) (leave 0))
 ;(apply #'append
(append
      (loop for r from (+ 1 jump) to (- dim drop)
        collect (loop for x from (- (* r dim) (- dim 1 skip) ) to (- (* r dim) leave) collect x ))))
(loop for x in (experimental-mesh-simple 5 0 1 1 0)
      for y in (experimental-mesh-simple 5 1 0 0 1)
      collect (list x y) )
(defun experimental-mesh-generator (dim &optional  (jump 0) (drop 0) (skip 0) (leave 0))
  (apply #'append
    (loop for r from (+ 1 jump) to (- dim drop)
      collect (loop for x from (- (* r dim) (- dim 1 skip) ) to (- (* r dim) leave) collect x ))))
(defun experimental-mesh ()
  (append
    
    (loop for x in (experimental-mesh-generator 5 0 0 0 1)
      for y in (experimental-mesh-generator 5 0 0 1 0)
      collect (list x y) )
    (loop for x in (experimental-mesh-generator 5 0 1 0 0)
      for y in (experimental-mesh-generator 5 1 0 0 0)
      collect (list x y) )
    (loop for x in (experimental-mesh-generator 5 0 1 1 0)
      for y in (experimental-mesh-generator 5 1 0 0 1)
      collect (list x y) )
    (loop for x in (experimental-mesh-generator 5 0 1 0 1)
      for y in (experimental-mesh-generator 5 1 0 1 0)
      collect (list x y) )))
(defun experimental-mesh (size)
  (append
    
    (loop for x in (experimental-mesh-generator size 0 0 0 1)
      for y in (experimental-mesh-generator size 0 0 1 0)
      collect (list x y) )
    (loop for x in (experimental-mesh-generator size 0 1 0 0)
      for y in (experimental-mesh-generator size 1 0 0 0)
      collect (list x y) )
    (loop for x in (experimental-mesh-generator size 0 1 1 0)
      for y in (experimental-mesh-generator size 1 0 0 1)
      collect (list x y) )
    (loop for x in (experimental-mesh-generator size 0 1 0 1)
      for y in (experimental-mesh-generator size 1 0 1 0)
      collect (list x y) )))
(experimental-mesh 5)
(experimental-mesh 2)
(experimental-mesh 3)
(+ (apply '(1 2 3 4)) 
)
0
(+ (concat '(1 2 3 4)))
0
(+ (values-list '(1 2 3 4)))
(+ (values '(1 2 3 4)))
0
(apply #'values '(1 2 3))
(+ (apply #'values '(1 2 3)))
(+ (apply #'+ '(1 2 3)))
(+ (break-list '(1 2 3)))
0
(+ (break-list '(1 2 3))
)
0
(+ (mapcar '(1 2 3)))
0
(+ (apply '(1 2 3)))
0
(+ '(1 2 3))
0
(+ (reduce '(1 2 3)))
(reduce '(1 2 3))
1
(reduce (list 1 2 3))
0
(reduce '#+ (list 1 2 3))
0
(reduce #'+ (list 1 2 3))
0
(reduce #'+ (list 1 2 3))
(defun experimental-mesh-worker (dim jump drop skip leave)
  (apply #'append
    (loop for r from (+ 1 jump) to (- dim drop)
      collect (loop for x from (- (* r dim) (- dim 1 skip) ) to (- (* r dim) leave) collect x ))))
(defun experimental-mesh-generator (size jump1 drop1 skip1 leave1 jump2 drop2 skip2 leave2 )
 (loop for x in (experimental-mesh-worker size jump1 drop1 skip1 leave1)
      for y in (experimental-mesh-worker size jump2 drop2 skip2 leave2)
      collect (list x y) )
(defun experimental-mesh (size)
  (append
  (experimental-mesh-generator size 0 0 0 1 0 0 1 0)
  (experimental-mesh-generator size 0 1 0 0 1 0 0 0)
  (experimental-mesh-generator size 0 1 1 0 1 0 0 1)
  (experimental-mesh-generator size 0 1 0 1 1 0 1 0)))
)
(defun experimental-mesh-generator (size jump1 drop1 skip1 leave1 jump2 drop2 skip2 leave2 )
 (loop for x in (experimental-mesh-worker size jump1 drop1 skip1 leave1)
      for y in (experimental-mesh-worker size jump2 drop2 skip2 leave2)
      collect (list x y) ))
(defun experimental-mesh (size)
  (append
  (experimental-mesh-generator size 0 0 0 1 0 0 1 0)
  (experimental-mesh-generator size 0 1 0 0 1 0 0 0)
  (experimental-mesh-generator size 0 1 1 0 1 0 0 1)
  (experimental-mesh-generator size 0 1 0 1 1 0 1 0)))
experimental-mesh 5)
0
(defun experimental-mesh-worker (dim jump drop skip leave)
  (apply #'append
    (loop for r from (+ 1 jump) to (- dim drop)
      collect (loop for x from (- (* r dim) (- dim 1 skip) ) to (- (* r dim) leave) collect x ))))
(defun experimental-mesh-generator (size jump1 drop1 skip1 leave1 jump2 drop2 skip2 leave2 )
 (loop for x in (experimental-mesh-worker size jump1 drop1 skip1 leave1)
      for y in (experimental-mesh-worker size jump2 drop2 skip2 leave2)
      collect (list x y) ))
(defun experimental-mesh (size)
  (append
  (experimental-mesh-generator size 0 0 0 1 0 0 1 0)
  (experimental-mesh-generator size 0 1 0 0 1 0 0 0)
  (experimental-mesh-generator size 0 1 1 0 1 0 0 1)
  (experimental-mesh-generator size 0 1 0 1 1 0 1 0)))
(defun experimental-mesh 5)
0
  (experimental-mesh-generator size 0 0 0 1 0 0 1 0)
0
  (experimental-mesh-generator 5 0 0 0 1 0 0 1 0)
  (append
  (experimental-mesh-generator size 0 0 0 1 0 0 1 0)
  (experimental-mesh-generator size 0 1 0 0 1 0 0 0))
0
  (append
  (experimental-mesh-generator 5 0 0 0 1 0 0 1 0)
  (experimental-mesh-generator 5 0 1 0 0 1 0 0 0))
  (append
  (experimental-mesh-generator 5 0 0 0 1 0 0 1 0)
  (experimental-mesh-generator 5 0 1 0 0 1 0 0 0)
  (experimental-mesh-generator 5 0 1 1 0 1 0 0 1)
)
  (append
  (experimental-mesh-generator 5 0 0 0 1 0 0 1 0)
  (experimental-mesh-generator 5 0 1 0 0 1 0 0 0)
  (experimental-mesh-generator 5 0 1 1 0 1 0 0 1)
  (experimental-mesh-generator 5 0 1 0 1 1 0 1 0)
(defun experimental-mesh (size)
  (list
  (experimental-mesh-generator size 0 0 0 1 0 0 1 0)
  (experimental-mesh-generator size 0 1 0 0 1 0 0 0)
  (experimental-mesh-generator size 0 1 1 0 1 0 0 1)
  (experimental-mesh-generator size 0 1 0 1 1 0 1 0)))
(defun experimental-mesh 5)
  (append
  (experimental-mesh-generator size 0 0 0 1 0 0 1 0)
  (experimental-mesh-generator size 0 1 0 0 1 0 0 0)
  (experimental-mesh-generator size 0 1 1 0 1 0 0 1)
  (experimental-mesh-generator size 0 1 0 1 1 0 1 0))
0
1
0
  (append
  (experimental-mesh-generator size 0 0 0 1 0 0 1 0)
  (experimental-mesh-generator size 0 1 0 0 1 0 0 0)
  (experimental-mesh-generator size 0 1 1 0 1 0 0 1)
  (experimental-mesh-generator size 0 1 0 1 1 0 1 0))
0
(append
  (experimental-mesh-generator size 0 0 0 1 0 0 1 0)
  (experimental-mesh-generator size 0 1 0 0 1 0 0 0)
  (experimental-mesh-generator size 0 1 1 0 1 0 0 1)
  (experimental-mesh-generator size 0 1 0 1 1 0 1 0))
0
(append
  (experimental-mesh-generator 5 0 0 0 1 0 0 1 0)
  (experimental-mesh-generator 5 0 1 0 0 1 0 0 0)
  (experimental-mesh-generator 5 0 1 1 0 1 0 0 1)
  (experimental-mesh-generator 5 0 1 0 1 1 0 1 0))
(defun experimental-mesh (size)
  (append
  (experimental-mesh-generator ,size 0 0 0 1 0 0 1 0)
  (experimental-mesh-generator ,size 0 1 0 0 1 0 0 0)
  (experimental-mesh-generator ,size 0 1 1 0 1 0 0 1)
  (experimental-mesh-generator ,size 0 1 0 1 1 0 1 0)))
3
0
(defun experimental-mesh (size)
  (apply #'append
  (experimental-mesh-generator size 0 0 0 1 0 0 1 0)
  (experimental-mesh-generator size 0 1 0 0 1 0 0 0)
  (experimental-mesh-generator size 0 1 1 0 1 0 0 1)
  (experimental-mesh-generator size 0 1 0 1 1 0 1 0)))
(experimental-mesh 3)
(experimental-mesh 4)
(experimental-mesh 5)
(experimental-mesh 10)
(experimental-mesh 100)
(experimental-mesh 5)
(nth 1 '(1 2 3))
(second '(1 2 3))
(first '(1 2 3))
(quit)
8
6
8
6
(make-array '(5 5 5 5 5) )
(loop for x from 1 to 5 collect x )
(loop for x from 1 to 5 collect 5 )
(defun lucia (y) (make-array (loop for x from 1 to y collect y ) ))
(lucia 15)
0
(lucia 1)
(lucia 2)
(lucia 3)
(lucia 4)
(lucia 5)
(lucia 6)
(defun lucia (y) (make-array (loop for x from 1 to y collect 1 ) ))
(lucia 6)
(lucia 15)
(defun lucia (y z) (make-array (loop for x from 1 to y collect z ) ))
(lucia 15 2)
(lucia 15 15)
0
(defun lucia (y z) (make-array (loop for x from 1 to y collect z ) ))
(defun david (z) (+ (eval z) 1))
(lucia 15 1)
(lucia 15 2)
(lucia 15 3)
1
(lucia 2 3)
(lucia 1 3)
(lucia 1 1)
(lucia 1 2)
(lucia 1 3)
(lucia 1 1)
(lucia 2 2)
(lucia 3 3)
(lucia 4 4)
(lucia 5 5)
(defun david (x) (lucia x x))
(david 1)
(david 2)
(david 3)
(david 4)
(david 5)
(david 6)
(david 7)
(david 15)
0
(quit)
